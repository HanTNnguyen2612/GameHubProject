/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/JSP_Servlet/Servlet.java to edit this template
 */
package Controller;

import Model.GamePost;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.Base64;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.Part;
import org.apache.commons.io.IOUtils;
import org.bson.Document;

/**
 *
 * @author OS
 */
public class AddGameMemberController extends HttpServlet {

     private MongoClient mongoClient;

    @Override
    public void init() throws ServletException {
        mongoClient = MongoClients.create("mongodb+srv://LoliHunter:Loli_slayer_123@gamehub.hzcoa.mongodb.net/?retryWrites=true&w=majority&appName=GameHub");
    }
   
    @Override
protected void doPost(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException {
    try {
        // Get form parameters
        String title = request.getParameter("Title");
        String gamePlay = request.getParameter("Gameplay");
        String description = request.getParameter("Description");
        String dateRelease = request.getParameter("DateRelease");
        String author = request.getParameter("Author");
        String genre = request.getParameter("Genre");

        // Get the ratings, handle null or empty values
        double priceRating = parseDoubleOrDefault(request.getParameter("PriceRating"), 0);
        double graphicRating = parseDoubleOrDefault(request.getParameter("GraphicRating"), 0);
        double difficultyRating = parseDoubleOrDefault(request.getParameter("DifficultyRating"), 0);
        double gameplayRating = parseDoubleOrDefault(request.getParameter("GameplayRating"), 0);

        // Calculate the average rating
        double averageRating = (priceRating + graphicRating + difficultyRating + gameplayRating) / 4;

        // Get the admin's ID from the session
        String adminId = (String) request.getSession().getAttribute("adminId");

        // Handle file upload, check if filePart is not null
        Part filePart = request.getPart("file");
        String fileName = null;
        String fileDataBase64 = null;

        if (filePart != null && filePart.getSize() > 0) {
            fileName = filePart.getSubmittedFileName();
            InputStream fileContent = filePart.getInputStream();

            // Read file data into byte array and convert to Base64
            byte[] fileDataBytes = IOUtils.toByteArray(fileContent);
            fileDataBase64 = Base64.getEncoder().encodeToString(fileDataBytes); // Convert byte array to Base64 string
        }

        // Create a GamePost object
        GamePost gamePost = new GamePost(
                null, // postID will be automatically generated by MongoDB
                title,
                gamePlay,
                description,
                dateRelease,
                author,
                genre,
                adminId,
                fileName,
                fileDataBase64
        );

        // Get MongoDB database and collection
        MongoDatabase database = mongoClient.getDatabase("GameHub");
        MongoCollection<Document> collection = database.getCollection("postGameMember");

        // Create a MongoDB Document from the GamePost object
        Document postGame = new Document("Title", gamePost.getTitle())
                .append("GamePlay", gamePost.getGamePlay())
                .append("Description", gamePost.getDescription())
                .append("DateRelease", gamePost.getDateRelease())
                .append("Author", gamePost.getAuthor())
                .append("Genre", gamePost.getGenre())
                .append("AdminId", gamePost.getAdminId()) // Add admin ID to the post
                .append("FileName", gamePost.getFileName())
                .append("FileData", gamePost.getFileData()) // Save the Base64 string directly
                .append("PriceRating", priceRating)
                .append("GraphicRating", graphicRating)
                .append("DifficultyRating", difficultyRating)
                .append("GameplayRating", gameplayRating)
                .append("AverageRating", averageRating); // Add the average rating

        // Insert the document into the MongoDB collection
        collection.insertOne(postGame);

        // Redirect to the admin page after successful insertion
        response.sendRedirect("ReadGameHomeMemberController");
    } catch (Exception e) {
        e.printStackTrace(); // Log exception
        response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Error processing game post");
    }
}


// Utility method to parse Double or return default value (0) if null or empty
private double parseDoubleOrDefault(String value, double defaultValue) {
    if (value == null || value.trim().isEmpty()) {
        return defaultValue;
    }
    try {
        return Double.parseDouble(value.trim());
    } catch (NumberFormatException e) {
        return defaultValue; // Return default if parsing fails
    }
}

    @Override
public void destroy() {
    if (mongoClient != null) {
        mongoClient.close();  // Closes MongoDB connection
        mongoClient = null;   // Ensure it's null after closing
    }
}


}
