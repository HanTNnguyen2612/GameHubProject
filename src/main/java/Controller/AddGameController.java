package Controller;

import Model.GamePost;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import org.apache.commons.io.IOUtils;
import org.bson.Document;
import org.bson.types.Binary;

import javax.servlet.ServletException;
import javax.servlet.annotation.MultipartConfig;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.Part;
import java.io.IOException;
import java.io.InputStream;
import java.util.Base64;

@MultipartConfig
public class AddGameController extends HttpServlet {

    private MongoClient mongoClient;

    @Override
    public void init() throws ServletException {
        mongoClient = MongoClients.create("mongodb+srv://ngotranxuanhoa09062004:hoa09062004@gamehub.hzcoa.mongodb.net/?retryWrites=true&w=majority&appName=GameHub");
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        // Get form parameters
        String title = request.getParameter("Title");
        String gamePlay = request.getParameter("Gameplay");
        String description = request.getParameter("Description");
        String dateRelease = request.getParameter("DateRelease");
        String author = request.getParameter("Author");
        String genre = request.getParameter("Genre");

        // Get the admin's ID from the session
        String adminId = (String) request.getSession().getAttribute("adminId");

        // Handle file upload
        Part filePart = request.getPart("file");
        String fileName = filePart.getSubmittedFileName();
        InputStream fileContent = filePart.getInputStream();
        
        // Read file data into byte array and convert to Base64
        byte[] fileDataBytes = IOUtils.toByteArray(fileContent);
        String fileDataBase64 = Base64.getEncoder().encodeToString(fileDataBytes); // Convert byte array to Base64 string

        // Create a GamePost object
        GamePost gamePost = new GamePost(
                null, // postID will be automatically generated by MongoDB
                title,
                gamePlay,
                description,
                dateRelease,
                author,
                genre,
                adminId,
                fileName,
                fileDataBase64 // Use the Base64 string here
        );

        // Get MongoDB database and collection
        MongoDatabase database = mongoClient.getDatabase("GameHub");
        MongoCollection<Document> collection = database.getCollection("postGame");

        // Create a MongoDB Document from the GamePost object
        Document postGame = new Document("Title", gamePost.getTitle())
                .append("GamePlay", gamePost.getGamePlay())
                .append("Description", gamePost.getDescription())
                .append("DateRelease", gamePost.getDateRelease())
                .append("Author", gamePost.getAuthor())
                .append("Genre", gamePost.getGenre())
                .append("AdminId", gamePost.getAdminId()) // Add admin ID to the post
                .append("FileName", gamePost.getFileName())
                .append("FileData", fileDataBase64); // Save the Base64 string directly

        // Insert the document into the MongoDB collection
        collection.insertOne(postGame);

        // Redirect to the admin page after successful insertion
        response.sendRedirect("AddGameController");
    }
          // Cach 2: su dung anh duoi dang binary
//     @Override
//protected void doPost(HttpServletRequest request, HttpServletResponse response)
//        throws ServletException, IOException {
//    // Get form parameters
//    String title = request.getParameter("Title");
//    String gamePlay = request.getParameter("Gameplay");
//    String description = request.getParameter("Description");
//    String dateRelease = request.getParameter("DateRelease");
//    String author = request.getParameter("Author");
//    String genre = request.getParameter("Genre");
//
//    // Get the admin's ID from the session
//    String adminId = (String) request.getSession().getAttribute("adminId");
//
//    // Handle file upload
//    Part filePart = request.getPart("file");
//    String fileName = filePart.getSubmittedFileName();
//    InputStream fileContent = filePart.getInputStream();
//    Binary fileData = new Binary(IOUtils.toByteArray(fileContent)); // Convert file content to binary
//
//    // Create a GamePost object
//    GamePost gamePost = new GamePost(
//            null, // postID will be automatically generated by MongoDB
//            title,
//            gamePlay,
//            description,
//            dateRelease,
//            author,
//            genre,
//            adminId,
//            fileName,
//            fileData.toString() // Convert Binary to string for GamePost object
//    );
//
//    // Get MongoDB database and collection
//    MongoDatabase database = mongoClient.getDatabase("GameHub");
//    MongoCollection<Document> collection = database.getCollection("postGame");
//
//    // Create a MongoDB Document from the GamePost object
//    Document postGame = new Document("Title", gamePost.getTitle())
//            .append("GamePlay", gamePost.getGamePlay())
//            .append("Description", gamePost.getDescription())
//            .append("DateRelease", gamePost.getDateRelease())
//            .append("Author", gamePost.getAuthor())
//            .append("Genre", gamePost.getGenre())
//            .append("AdminId", gamePost.getAdminId()) // Add admin ID to the post
//            .append("FileName", gamePost.getFileName())
//            .append("FileData", fileData); // Save the file data as binary
//
//    // Insert the document into the MongoDB collection
//    collection.insertOne(postGame);
//
//    // Redirect to the admin page after successful insertion
//    response.sendRedirect("admin-after-login.jsp");
//}
    @Override
    public void destroy() {
        if (mongoClient != null) {
            mongoClient.close();
        }
    }
}
